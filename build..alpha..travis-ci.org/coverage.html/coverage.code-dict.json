{"/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/test.js":"/* istanbul instrument in package npmtest_cordova_plugin_code_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/lib.npmtest_cordova_plugin_code_push.js":"/* istanbul instrument in package npmtest_cordova_plugin_code_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cordova_plugin_code_push = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cordova_plugin_code_push = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cordova-plugin-code-push && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cordova_plugin_code_push */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cordova_plugin_code_push\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cordova_plugin_code_push.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cordova_plugin_code_push.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cordova_plugin_code_push.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cordova_plugin_code_push.__dirname + '/lib.npmtest_cordova_plugin_code_push.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/codePush.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar LocalPackage = require(\"./localPackage\");\nvar RemotePackage = require(\"./remotePackage\");\nvar CodePushUtil = require(\"./codePushUtil\");\nvar NativeAppInfo = require(\"./nativeAppInfo\");\nvar Sdk = require(\"./sdk\");\nvar SyncStatus = require(\"./syncStatus\");\nvar CodePush = (function () {\n    function CodePush() {\n    }\n    CodePush.prototype.notifyApplicationReady = function (notifySucceeded, notifyFailed) {\n        cordova.exec(notifySucceeded, notifyFailed, \"CodePush\", \"notifyApplicationReady\", []);\n    };\n    CodePush.prototype.restartApplication = function (installSuccess, errorCallback) {\n        cordova.exec(installSuccess, errorCallback, \"CodePush\", \"restartApplication\", []);\n    };\n    CodePush.prototype.reportStatus = function (status, label, appVersion, deploymentKey, previousLabelOrAppVersion, previousDeploymentKey) {\n        if (((!label && appVersion === previousLabelOrAppVersion) || label === previousLabelOrAppVersion)\n            && deploymentKey === previousDeploymentKey) {\n            return;\n        }\n        var createPackageForReporting = function (label, appVersion) {\n            return {\n                label: label, appVersion: appVersion, deploymentKey: deploymentKey,\n                description: null, isMandatory: false,\n                packageHash: null, packageSize: null,\n                failedInstall: false\n            };\n        };\n        var reportDone = function (error) {\n            var reportArgs = {\n                status: status,\n                label: label,\n                appVersion: appVersion,\n                deploymentKey: deploymentKey,\n                previousLabelOrAppVersion: previousLabelOrAppVersion,\n                previousDeploymentKey: previousDeploymentKey\n            };\n            if (error) {\n                CodePushUtil.logError(\"An error occurred while reporting status: \" + JSON.stringify(reportArgs), error);\n                cordova.exec(null, null, \"CodePush\", \"reportFailed\", [reportArgs]);\n            }\n            else {\n                CodePushUtil.logMessage(\"Reported status: \" + JSON.stringify(reportArgs));\n                cordova.exec(null, null, \"CodePush\", \"reportSucceeded\", [reportArgs]);\n            }\n        };\n        switch (status) {\n            case ReportStatus.STORE_VERSION:\n                Sdk.reportStatusDeploy(null, AcquisitionStatus.DeploymentSucceeded, deploymentKey, previousLabelOrAppVersion, previousDeploymentKey, reportDone);\n                break;\n            case ReportStatus.UPDATE_CONFIRMED:\n                Sdk.reportStatusDeploy(createPackageForReporting(label, appVersion), AcquisitionStatus.DeploymentSucceeded, deploymentKey, previousLabelOrAppVersion, previousDeploymentKey, reportDone);\n                break;\n            case ReportStatus.UPDATE_ROLLED_BACK:\n                Sdk.reportStatusDeploy(createPackageForReporting(label, appVersion), AcquisitionStatus.DeploymentFailed, deploymentKey, previousLabelOrAppVersion, previousDeploymentKey, reportDone);\n                break;\n        }\n    };\n    CodePush.prototype.getCurrentPackage = function (packageSuccess, packageError) {\n        NativeAppInfo.isPendingUpdate(function (pendingUpdate) {\n            var packageInfoFile = pendingUpdate ? LocalPackage.OldPackageInfoFile : LocalPackage.PackageInfoFile;\n            LocalPackage.getPackageInfoOrNull(packageInfoFile, packageSuccess, packageError);\n        });\n    };\n    CodePush.prototype.getPendingPackage = function (packageSuccess, packageError) {\n        NativeAppInfo.isPendingUpdate(function (pendingUpdate) {\n            if (pendingUpdate) {\n                LocalPackage.getPackageInfoOrNull(LocalPackage.PackageInfoFile, packageSuccess, packageError);\n            }\n            else {\n                packageSuccess(null);\n            }\n        });\n    };\n    CodePush.prototype.checkForUpdate = function (querySuccess, queryError, deploymentKey) {\n        try {\n            var callback = function (error, remotePackageOrUpdateNotification) {\n                if (error) {\n                    CodePushUtil.invokeErrorCallback(error, queryError);\n                }\n                else {\n                    var appUpToDate = function () {\n                        CodePushUtil.logMessage(\"App is up to date.\");\n                        querySuccess && querySuccess(null);\n                    };\n                    if (remotePackageOrUpdateNotification) {\n                        if (remotePackageOrUpdateNotification.updateAppVersion) {\n                            CodePushUtil.logMessage(\"An update is available, but it is targeting a newer binary version than you are currently running.\");\n                            appUpToDate();\n                        }\n                        else {\n                            var remotePackage = remotePackageOrUpdateNotification;\n                            NativeAppInfo.isFailedUpdate(remotePackage.packageHash, function (installFailed) {\n                                var result = new RemotePackage();\n                                result.appVersion = remotePackage.appVersion;\n                                result.deploymentKey = deploymentKey;\n                                result.description = remotePackage.description;\n                                result.downloadUrl = remotePackage.downloadUrl;\n                                result.isMandatory = remotePackage.isMandatory;\n                                result.label = remotePackage.label;\n                                result.packageHash = remotePackage.packageHash;\n                                result.packageSize = remotePackage.packageSize;\n                                result.failedInstall = installFailed;\n                                CodePushUtil.logMessage(\"An update is available. \" + JSON.stringify(result));\n                                querySuccess && querySuccess(result);\n                            });\n                        }\n                    }\n                    else {\n                        appUpToDate();\n                    }\n                }\n            };\n            var queryUpdate = function () {\n                Sdk.getAcquisitionManager(function (initError, acquisitionManager) {\n                    if (initError) {\n                        CodePushUtil.invokeErrorCallback(initError, queryError);\n                    }\n                    else {\n                        LocalPackage.getCurrentOrDefaultPackage(function (localPackage) {\n                            NativeAppInfo.getApplicationVersion(function(appVersionError, currentBinaryVersion) {\n                                if (!appVersionError) {\n                                    localPackage.appVersion = currentBinaryVersion;\n                                }\n                                CodePushUtil.logMessage(\"Checking for update.\");\n                                acquisitionManager.queryUpdateWithCurrentPackage(localPackage, callback);\n                            });\n                        }, function (error) {\n                            CodePushUtil.invokeErrorCallback(error, queryError);\n                        });\n                    }\n                }, deploymentKey);\n            };\n            if (deploymentKey) {\n                queryUpdate();\n            }\n            else {\n                NativeAppInfo.getDeploymentKey(function (deploymentKeyError, defaultDeploymentKey) {\n                    if (deploymentKeyError) {\n                        CodePushUtil.invokeErrorCallback(deploymentKeyError, queryError);\n                    }\n                    else {\n                        deploymentKey = defaultDeploymentKey;\n                        queryUpdate();\n                    }\n                });\n            }\n        }\n        catch (e) {\n            CodePushUtil.invokeErrorCallback(new Error(\"An error occurred while querying for updates.\" + CodePushUtil.getErrorMessage(e)), queryError);\n        }\n    };\n    CodePush.prototype.sync = function (syncCallback, syncOptions, downloadProgress) {\n        if (CodePush.SyncInProgress) {\n            CodePushUtil.logMessage(\"Sync already in progress.\");\n            syncCallback && syncCallback(SyncStatus.IN_PROGRESS);\n        }\n        else {\n            var syncCallbackAndUpdateSyncInProgress = function (result) {\n                switch (result) {\n                    case SyncStatus.ERROR:\n                    case SyncStatus.IN_PROGRESS:\n                    case SyncStatus.UP_TO_DATE:\n                    case SyncStatus.UPDATE_IGNORED:\n                    case SyncStatus.UPDATE_INSTALLED:\n                        CodePush.SyncInProgress = false;\n                    default:\n                        break;\n                }\n                syncCallback && syncCallback(result);\n            };\n            CodePush.SyncInProgress = true;\n            this.syncInternal(syncCallbackAndUpdateSyncInProgress, syncOptions, downloadProgress);\n        }\n    };\n    CodePush.prototype.syncInternal = function (syncCallback, syncOptions, downloadProgress) {\n        if (!syncOptions) {\n            syncOptions = this.getDefaultSyncOptions();\n        }\n        else {\n            var defaultDialogOptions = this.getDefaultUpdateDialogOptions();\n            if (syncOptions.updateDialog) {\n                if (typeof syncOptions.updateDialog !== typeof ({})) {\n                    syncOptions.updateDialog = defaultDialogOptions;\n                }\n                else {\n                    CodePushUtil.copyUnassignedMembers(defaultDialogOptions, syncOptions.updateDialog);\n                }\n            }\n            var defaultOptions = this.getDefaultSyncOptions();\n            CodePushUtil.copyUnassignedMembers(defaultOptions, syncOptions);\n        }\n        window.codePush.notifyApplicationReady();\n        var onError = function (error) {\n            CodePushUtil.logError(\"An error occurred during sync.\", error);\n            syncCallback && syncCallback(SyncStatus.ERROR);\n        };\n        var onInstallSuccess = function (appliedWhen) {\n            switch (appliedWhen) {\n                case InstallMode.ON_NEXT_RESTART:\n                    CodePushUtil.logMessage(\"Update is installed and will be run on the next app restart.\");\n                    break;\n                case InstallMode.ON_NEXT_RESUME:\n                    if (syncOptions.minimumBackgroundDuration > 0) {\n                        CodePushUtil.logMessage(\"Update is installed and will be run after the app has been in the background for at least \" + syncOptions.minimumBackgroundDuration + \" seconds.\");\n                    }\n                    else {\n                        CodePushUtil.logMessage(\"Update is installed and will be run when the app next resumes.\");\n                    }\n                    break;\n            }\n            syncCallback && syncCallback(SyncStatus.UPDATE_INSTALLED);\n        };\n        var onDownloadSuccess = function (localPackage) {\n            syncCallback && syncCallback(SyncStatus.INSTALLING_UPDATE);\n            localPackage.install(onInstallSuccess, onError, syncOptions);\n        };\n        var downloadAndInstallUpdate = function (remotePackage) {\n            syncCallback && syncCallback(SyncStatus.DOWNLOADING_PACKAGE);\n            remotePackage.download(onDownloadSuccess, onError, downloadProgress);\n        };\n        var onUpdate = function (remotePackage) {\n            var updateShouldBeIgnored = remotePackage && (remotePackage.failedInstall && syncOptions.ignoreFailedUpdates);\n            if (!remotePackage || updateShouldBeIgnored) {\n                if (updateShouldBeIgnored) {\n                    CodePushUtil.logMessage(\"An update is available, but it is being ignored due to have been previously rolled back.\");\n                }\n                syncCallback && syncCallback(SyncStatus.UP_TO_DATE);\n            }\n            else {\n                var dlgOpts = syncOptions.updateDialog;\n                if (dlgOpts) {\n                    CodePushUtil.logMessage(\"Awaiting user action.\");\n                    syncCallback && syncCallback(SyncStatus.AWAITING_USER_ACTION);\n                }\n                if (remotePackage.isMandatory && syncOptions.updateDialog) {\n                    var message = dlgOpts.appendReleaseDescription ?\n                        dlgOpts.mandatoryUpdateMessage + dlgOpts.descriptionPrefix + remotePackage.description\n                        : dlgOpts.mandatoryUpdateMessage;\n                    navigator.notification.alert(message, function () { downloadAndInstallUpdate(remotePackage); }, dlgOpts.updateTitle, dlgOpts.mandatoryContinueButtonLabel);\n                }\n                else if (!remotePackage.isMandatory && syncOptions.updateDialog) {\n                    var optionalUpdateCallback = function (buttonIndex) {\n                        switch (buttonIndex) {\n                            case 1:\n                                downloadAndInstallUpdate(remotePackage);\n                                break;\n                            case 2:\n                            default:\n                                CodePushUtil.logMessage(\"User cancelled the update.\");\n                                syncCallback && syncCallback(SyncStatus.UPDATE_IGNORED);\n                                break;\n                        }\n                    };\n                    var message = dlgOpts.appendReleaseDescription ?\n                        dlgOpts.optionalUpdateMessage + dlgOpts.descriptionPrefix + remotePackage.description\n                        : dlgOpts.optionalUpdateMessage;\n                    navigator.notification.confirm(message, optionalUpdateCallback, dlgOpts.updateTitle, [dlgOpts.optionalInstallButtonLabel, dlgOpts.optionalIgnoreButtonLabel]);\n                }\n                else {\n                    downloadAndInstallUpdate(remotePackage);\n                }\n            }\n        };\n        syncCallback && syncCallback(SyncStatus.CHECKING_FOR_UPDATE);\n        window.codePush.checkForUpdate(onUpdate, onError, syncOptions.deploymentKey);\n    };\n    CodePush.prototype.getDefaultSyncOptions = function () {\n        if (!CodePush.DefaultSyncOptions) {\n            CodePush.DefaultSyncOptions = {\n                ignoreFailedUpdates: true,\n                installMode: InstallMode.ON_NEXT_RESTART,\n                minimumBackgroundDuration: 0,\n                mandatoryInstallMode: InstallMode.IMMEDIATE,\n                updateDialog: false,\n                deploymentKey: undefined\n            };\n        }\n        return CodePush.DefaultSyncOptions;\n    };\n    CodePush.prototype.getDefaultUpdateDialogOptions = function () {\n        if (!CodePush.DefaultUpdateDialogOptions) {\n            CodePush.DefaultUpdateDialogOptions = {\n                updateTitle: \"Update available\",\n                mandatoryUpdateMessage: \"An update is available that must be installed.\",\n                mandatoryContinueButtonLabel: \"Continue\",\n                optionalUpdateMessage: \"An update is available. Would you like to install it?\",\n                optionalInstallButtonLabel: \"Install\",\n                optionalIgnoreButtonLabel: \"Ignore\",\n                appendReleaseDescription: false,\n                descriptionPrefix: \" Description: \"\n            };\n        }\n        return CodePush.DefaultUpdateDialogOptions;\n    };\n    return CodePush;\n}());\nvar ReportStatus;\n(function (ReportStatus) {\n    ReportStatus[ReportStatus[\"STORE_VERSION\"] = 0] = \"STORE_VERSION\";\n    ReportStatus[ReportStatus[\"UPDATE_CONFIRMED\"] = 1] = \"UPDATE_CONFIRMED\";\n    ReportStatus[ReportStatus[\"UPDATE_ROLLED_BACK\"] = 2] = \"UPDATE_ROLLED_BACK\";\n})(ReportStatus || (ReportStatus = {}));\nvar instance = new CodePush();\nmodule.exports = instance;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/localPackage.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Package = require(\"./package\");\nvar NativeAppInfo = require(\"./nativeAppInfo\");\nvar FileUtil = require(\"./fileUtil\");\nvar CodePushUtil = require(\"./codePushUtil\");\nvar Sdk = require(\"./sdk\");\nvar LocalPackage = (function (_super) {\n    __extends(LocalPackage, _super);\n    function LocalPackage() {\n        _super.apply(this, arguments);\n    }\n    LocalPackage.prototype.install = function (installSuccess, errorCallback, installOptions) {\n        var _this = this;\n        try {\n            CodePushUtil.logMessage(\"Installing update\");\n            if (!installOptions) {\n                installOptions = LocalPackage.getDefaultInstallOptions();\n            }\n            else {\n                CodePushUtil.copyUnassignedMembers(LocalPackage.getDefaultInstallOptions(), installOptions);\n            }\n            var installError = function (error) {\n                CodePushUtil.invokeErrorCallback(error, errorCallback);\n                Sdk.reportStatusDeploy(_this, AcquisitionStatus.DeploymentFailed, _this.deploymentKey);\n            };\n            var newPackageLocation = LocalPackage.VersionsDir + \"/\" + this.packageHash;\n            var donePackageFileCopy = function (deployDir) {\n                _this.localPath = deployDir.fullPath;\n                _this.finishInstall(deployDir, installOptions, installSuccess, installError);\n            };\n            var newPackageUnzipped = function (unzipError) {\n                if (unzipError) {\n                    installError && installError(new Error(\"Could not unzip package. \" + CodePushUtil.getErrorMessage(unzipError)));\n                }\n                else {\n                    LocalPackage.handleDeployment(newPackageLocation, CodePushUtil.getNodeStyleCallbackFor(donePackageFileCopy, installError));\n                }\n            };\n            FileUtil.getDataDirectory(LocalPackage.DownloadUnzipDir, false, function (error, directoryEntry) {\n                var unzipPackage = function () {\n                    FileUtil.getDataDirectory(LocalPackage.DownloadUnzipDir, true, function (innerError, unzipDir) {\n                        if (innerError) {\n                            installError && installError(innerError);\n                        }\n                        else {\n                            zip.unzip(_this.localPath, unzipDir.toInternalURL(), newPackageUnzipped);\n                        }\n                    });\n                };\n                if (!error && !!directoryEntry) {\n                    directoryEntry.removeRecursively(function () {\n                        unzipPackage();\n                    }, function (cleanupError) {\n                        installError && installError(FileUtil.fileErrorToError(cleanupError));\n                    });\n                }\n                else {\n                    unzipPackage();\n                }\n            });\n        }\n        catch (e) {\n            installError && installError(new Error(\"An error occured while installing the package. \" + CodePushUtil.getErrorMessage(e)));\n        }\n    };\n    LocalPackage.prototype.finishInstall = function (deployDir, installOptions, installSuccess, installError) {\n        var _this = this;\n        function backupPackageInformationFileIfNeeded(backupIfNeededDone) {\n            NativeAppInfo.isPendingUpdate(function (pendingUpdate) {\n                if (pendingUpdate) {\n                    backupIfNeededDone(null, null);\n                }\n                else {\n                    LocalPackage.backupPackageInformationFile(backupIfNeededDone);\n                }\n            });\n        }\n        LocalPackage.getCurrentOrDefaultPackage(function (oldPackage) {\n            backupPackageInformationFileIfNeeded(function (backupError) {\n                _this.writeNewPackageMetadata(deployDir, function (writeMetadataError) {\n                    if (writeMetadataError) {\n                        installError && installError(writeMetadataError);\n                    }\n                    else {\n                        var invokeSuccessAndInstall = function () {\n                            CodePushUtil.logMessage(\"Install succeeded.\");\n                            var installModeToUse = _this.isMandatory ? installOptions.mandatoryInstallMode : installOptions.installMode;\n                            if (installModeToUse === InstallMode.IMMEDIATE) {\n                                installSuccess && installSuccess(installModeToUse);\n                                cordova.exec(function () { }, function () { }, \"CodePush\", \"install\", [deployDir.fullPath,\n                                    installModeToUse.toString(), installOptions.minimumBackgroundDuration.toString()]);\n                            }\n                            else {\n                                cordova.exec(function () { installSuccess && installSuccess(installModeToUse); }, function () { installError && installError(); }, \"CodePush\", \"install\", [deployDir.fullPath,\n                                    installModeToUse.toString(), installOptions.minimumBackgroundDuration.toString()]);\n                            }\n                        };\n                        var preInstallSuccess = function () {\n                            invokeSuccessAndInstall();\n                        };\n                        var preInstallFailure = function (preInstallError) {\n                            CodePushUtil.logError(\"Preinstall failure.\", preInstallError);\n                            var error = new Error(\"An error has occured while installing the package. \" + CodePushUtil.getErrorMessage(preInstallError));\n                            installError && installError(error);\n                        };\n                        cordova.exec(preInstallSuccess, preInstallFailure, \"CodePush\", \"preInstall\", [deployDir.fullPath]);\n                    }\n                });\n            });\n        }, installError);\n    };\n    LocalPackage.handleDeployment = function (newPackageLocation, deployCallback) {\n        FileUtil.getDataDirectory(newPackageLocation, true, function (deployDirError, deployDir) {\n            FileUtil.getDataFile(LocalPackage.DownloadUnzipDir, LocalPackage.DiffManifestFile, false, function (manifestError, diffManifest) {\n                if (!manifestError && !!diffManifest) {\n                    LocalPackage.handleDiffDeployment(newPackageLocation, diffManifest, deployCallback);\n                }\n                else {\n                    LocalPackage.handleCleanDeployment(newPackageLocation, function (error) {\n                        deployCallback(error, deployDir);\n                    });\n                }\n            });\n        });\n    };\n    LocalPackage.prototype.writeNewPackageMetadata = function (deployDir, writeMetadataCallback) {\n        var _this = this;\n        NativeAppInfo.getApplicationBuildTime(function (buildTimeError, timestamp) {\n            NativeAppInfo.getApplicationVersion(function (appVersionError, appVersion) {\n                buildTimeError && CodePushUtil.logError(\"Could not get application build time. \" + buildTimeError);\n                appVersionError && CodePushUtil.logError(\"Could not get application version.\" + appVersionError);\n                var currentPackageMetadata = {\n                    nativeBuildTime: timestamp,\n                    localPath: _this.localPath,\n                    appVersion: appVersion,\n                    deploymentKey: _this.deploymentKey,\n                    description: _this.description,\n                    isMandatory: _this.isMandatory,\n                    packageSize: _this.packageSize,\n                    label: _this.label,\n                    packageHash: _this.packageHash,\n                    isFirstRun: false,\n                    failedInstall: false,\n                    install: undefined\n                };\n                LocalPackage.writeCurrentPackageInformation(currentPackageMetadata, writeMetadataCallback);\n            });\n        });\n    };\n    LocalPackage.handleCleanDeployment = function (newPackageLocation, cleanDeployCallback) {\n        FileUtil.getDataDirectory(newPackageLocation, true, function (deployDirError, deployDir) {\n            FileUtil.getDataDirectory(LocalPackage.DownloadUnzipDir, false, function (unzipDirErr, unzipDir) {\n                if (unzipDirErr || deployDirError) {\n                    cleanDeployCallback(new Error(\"Could not copy new package.\"), null);\n                }\n                else {\n                    FileUtil.copyDirectoryEntriesTo(unzipDir, deployDir, function (copyError) {\n                        if (copyError) {\n                            cleanDeployCallback(copyError, null);\n                        }\n                        else {\n                            cleanDeployCallback(null, deployDir);\n                        }\n                    });\n                }\n            });\n        });\n    };\n    LocalPackage.copyCurrentPackage = function (newPackageLocation, copyCallback) {\n        var handleError = function (e) {\n            copyCallback && copyCallback(e, null);\n        };\n        var doCopy = function (currentPackagePath) {\n            var getCurrentPackageDirectory;\n            if (currentPackagePath) {\n                getCurrentPackageDirectory = function (getCurrentPackageDirectoryCallback) {\n                    FileUtil.getDataDirectory(currentPackagePath, false, getCurrentPackageDirectoryCallback);\n                };\n            }\n            else {\n                newPackageLocation = newPackageLocation + \"/www\";\n                getCurrentPackageDirectory = function (getCurrentPackageDirectoryCallback) {\n                    FileUtil.getApplicationDirectory(\"www\", getCurrentPackageDirectoryCallback);\n                };\n            }\n            FileUtil.getDataDirectory(newPackageLocation, true, function (deployDirError, deployDir) {\n                if (deployDirError) {\n                    handleError(new Error(\"Could not acquire the source/destination folders. \"));\n                }\n                else {\n                    var success = function (currentPackageDirectory) {\n                        FileUtil.copyDirectoryEntriesTo(currentPackageDirectory, deployDir, copyCallback);\n                    };\n                    var fail = function (fileSystemError) {\n                        copyCallback && copyCallback(FileUtil.fileErrorToError(fileSystemError), null);\n                    };\n                    getCurrentPackageDirectory(CodePushUtil.getNodeStyleCallbackFor(success, fail));\n                }\n            });\n        };\n        var packageFailure = function (error) {\n            doCopy();\n        };\n        var packageSuccess = function (currentPackage) {\n            doCopy(currentPackage.localPath);\n        };\n        LocalPackage.getPackage(LocalPackage.PackageInfoFile, packageSuccess, packageFailure);\n    };\n    LocalPackage.handleDiffDeployment = function (newPackageLocation, diffManifest, diffCallback) {\n        var handleError = function (e) {\n            diffCallback(e, null);\n        };\n        LocalPackage.copyCurrentPackage(newPackageLocation, function (currentPackageError) {\n            LocalPackage.handleCleanDeployment(newPackageLocation, function (cleanDeployError) {\n                FileUtil.readFileEntry(diffManifest, function (error, content) {\n                    if (error || currentPackageError || cleanDeployError) {\n                        handleError(new Error(\"Cannot perform diff-update.\"));\n                    }\n                    else {\n                        var manifest = JSON.parse(content);\n                        FileUtil.deleteEntriesFromDataDirectory(newPackageLocation, manifest.deletedFiles, function (deleteError) {\n                            FileUtil.getDataDirectory(newPackageLocation, true, function (deployDirError, deployDir) {\n                                if (deleteError || deployDirError) {\n                                    handleError(new Error(\"Cannot clean up deleted manifest files.\"));\n                                }\n                                else {\n                                    diffCallback(null, deployDir);\n                                }\n                            });\n                        });\n                    }\n                });\n            });\n        });\n    };\n    LocalPackage.writeCurrentPackageInformation = function (packageInfoMetadata, callback) {\n        var content = JSON.stringify(packageInfoMetadata);\n        FileUtil.writeStringToDataFile(content, LocalPackage.RootDir, LocalPackage.PackageInfoFile, true, callback);\n    };\n    LocalPackage.backupPackageInformationFile = function (callback) {\n        var reportFileError = function (error) {\n            callback(FileUtil.fileErrorToError(error), null);\n        };\n        var copyFile = function (fileToCopy) {\n            fileToCopy.getParent(function (parent) {\n                fileToCopy.copyTo(parent, LocalPackage.OldPackageInfoFile, function () {\n                    callback(null, null);\n                }, reportFileError);\n            }, reportFileError);\n        };\n        var gotFile = function (error, currentPackageFile) {\n            if (error) {\n                callback(error, null);\n            }\n            else {\n                FileUtil.getDataFile(LocalPackage.RootDir, LocalPackage.OldPackageInfoFile, false, function (error, oldPackageFile) {\n                    if (!error && !!oldPackageFile) {\n                        oldPackageFile.remove(function () {\n                            copyFile(currentPackageFile);\n                        }, reportFileError);\n                    }\n                    else {\n                        copyFile(currentPackageFile);\n                    }\n                });\n            }\n        };\n        FileUtil.getDataFile(LocalPackage.RootDir, LocalPackage.PackageInfoFile, false, gotFile);\n    };\n    LocalPackage.getOldPackage = function (packageSuccess, packageError) {\n        return LocalPackage.getPackage(LocalPackage.OldPackageInfoFile, packageSuccess, packageError);\n    };\n    LocalPackage.getPackage = function (packageFile, packageSuccess, packageError) {\n        var handleError = function (e) {\n            packageError && packageError(new Error(\"Cannot read package information. \" + CodePushUtil.getErrorMessage(e)));\n        };\n        try {\n            FileUtil.readDataFile(LocalPackage.RootDir, packageFile, function (error, content) {\n                if (error) {\n                    handleError(error);\n                }\n                else {\n                    try {\n                        var packageInfo = JSON.parse(content);\n                        LocalPackage.getLocalPackageFromMetadata(packageInfo, packageSuccess, packageError);\n                    }\n                    catch (e) {\n                        handleError(e);\n                    }\n                }\n            });\n        }\n        catch (e) {\n            handleError(e);\n        }\n    };\n    LocalPackage.getLocalPackageFromMetadata = function (metadata, packageSuccess, packageError) {\n        if (!metadata) {\n            packageError && packageError(new Error(\"Invalid package metadata.\"));\n        }\n        else {\n            NativeAppInfo.isFailedUpdate(metadata.packageHash, function (installFailed) {\n                NativeAppInfo.isFirstRun(metadata.packageHash, function (isFirstRun) {\n                    var localPackage = new LocalPackage();\n                    localPackage.appVersion = metadata.appVersion;\n                    localPackage.deploymentKey = metadata.deploymentKey;\n                    localPackage.description = metadata.description;\n                    localPackage.failedInstall = installFailed;\n                    localPackage.isFirstRun = isFirstRun;\n                    localPackage.label = metadata.label;\n                    localPackage.localPath = metadata.localPath;\n                    localPackage.packageHash = metadata.packageHash;\n                    localPackage.packageSize = metadata.packageSize;\n                    packageSuccess && packageSuccess(localPackage);\n                });\n            });\n        }\n    };\n    LocalPackage.getCurrentOrDefaultPackage = function (packageSuccess, packageError) {\n        LocalPackage.getPackageInfoOrDefault(LocalPackage.PackageInfoFile, packageSuccess, packageError);\n    };\n    LocalPackage.getOldOrDefaultPackage = function (packageSuccess, packageError) {\n        LocalPackage.getPackageInfoOrDefault(LocalPackage.OldPackageInfoFile, packageSuccess, packageError);\n    };\n    LocalPackage.getPackageInfoOrDefault = function (packageFile, packageSuccess, packageError) {\n        var packageFailure = function (error) {\n            NativeAppInfo.getApplicationVersion(function (appVersionError, appVersion) {\n                if (appVersionError) {\n                    CodePushUtil.logError(\"Could not get application version.\" + appVersionError);\n                    packageError(appVersionError);\n                    return;\n                }\n                NativeAppInfo.getBinaryHash(function (binaryHashError, binaryHash) {\n                    var defaultPackage = new LocalPackage();\n                    defaultPackage.appVersion = appVersion;\n                    if (binaryHashError) {\n                        CodePushUtil.logError(\"Could not get binary hash.\" + binaryHashError);\n                    }\n                    else {\n                        defaultPackage.packageHash = binaryHash;\n                    }\n                    packageSuccess(defaultPackage);\n                });\n            });\n        };\n        LocalPackage.getPackage(packageFile, packageSuccess, packageFailure);\n    };\n    LocalPackage.getPackageInfoOrNull = function (packageFile, packageSuccess, packageError) {\n        LocalPackage.getPackage(packageFile, packageSuccess, packageSuccess.bind(null, null));\n    };\n    LocalPackage.getDefaultInstallOptions = function () {\n        if (!LocalPackage.DefaultInstallOptions) {\n            LocalPackage.DefaultInstallOptions = {\n                installMode: InstallMode.ON_NEXT_RESTART,\n                minimumBackgroundDuration: 0,\n                mandatoryInstallMode: InstallMode.IMMEDIATE\n            };\n        }\n        return LocalPackage.DefaultInstallOptions;\n    };\n    LocalPackage.RootDir = \"codepush\";\n    LocalPackage.DownloadDir = LocalPackage.RootDir + \"/download\";\n    LocalPackage.DownloadUnzipDir = LocalPackage.DownloadDir + \"/unzipped\";\n    LocalPackage.DeployDir = LocalPackage.RootDir + \"/deploy\";\n    LocalPackage.VersionsDir = LocalPackage.DeployDir + \"/versions\";\n    LocalPackage.PackageUpdateFileName = \"update.zip\";\n    LocalPackage.PackageInfoFile = \"currentPackage.json\";\n    LocalPackage.OldPackageInfoFile = \"oldPackage.json\";\n    LocalPackage.DiffManifestFile = \"hotcodepush.json\";\n    return LocalPackage;\n}(Package));\nmodule.exports = LocalPackage;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/package.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar Package = (function () {\n    function Package() {\n    }\n    return Package;\n}());\nmodule.exports = Package;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/nativeAppInfo.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar DefaultServerUrl = \"https://codepush.azurewebsites.net/\";\nvar NativeAppInfo = (function () {\n    function NativeAppInfo() {\n    }\n    NativeAppInfo.getApplicationBuildTime = function (callback) {\n        var timestampSuccess = function (timestamp) { callback(null, timestamp); };\n        var timestampError = function () { callback(new Error(\"Could not get application timestamp.\"), null); };\n        cordova.exec(timestampSuccess, timestampError, \"CodePush\", \"getNativeBuildTime\", []);\n    };\n    NativeAppInfo.getApplicationVersion = function (callback) {\n        var versionSuccess = function (version) { callback(null, version); };\n        var versionError = function () { callback(new Error(\"Could not get application version.\"), null); };\n        cordova.exec(versionSuccess, versionError, \"CodePush\", \"getAppVersion\", []);\n    };\n    NativeAppInfo.getBinaryHash = function (callback) {\n        var binaryHashSuccess = function (binaryHash) { callback(null, binaryHash); };\n        var binaryHashError = function () { callback(new Error(\"Could not get binary hash.\"), null); };\n        cordova.exec(binaryHashSuccess, binaryHashError, \"CodePush\", \"getBinaryHash\", []);\n    };\n    NativeAppInfo.getServerURL = function (serverCallback) {\n        var serverSuccess = function (serverURL) { serverCallback(null, serverURL); };\n        var serverError = function () { serverCallback(null, DefaultServerUrl); };\n        cordova.exec(serverSuccess, serverError, \"CodePush\", \"getServerURL\", []);\n    };\n    NativeAppInfo.getDeploymentKey = function (deploymentKeyCallback) {\n        var deploymentSuccess = function (deploymentKey) { deploymentKeyCallback(null, deploymentKey); };\n        var deploymentError = function () { deploymentKeyCallback(new Error(\"Deployment key not found.\"), null); };\n        cordova.exec(deploymentSuccess, deploymentError, \"CodePush\", \"getDeploymentKey\", []);\n    };\n    NativeAppInfo.isFailedUpdate = function (packageHash, checkCallback) {\n        var win = function (failed) {\n            checkCallback && checkCallback(!!failed);\n        };\n        var fail = function (e) {\n            win(0);\n        };\n        cordova.exec(win, fail, \"CodePush\", \"isFailedUpdate\", [packageHash]);\n    };\n    NativeAppInfo.isFirstRun = function (packageHash, firstRunCallback) {\n        var win = function (firstRun) {\n            firstRunCallback(!!firstRun);\n        };\n        var fail = function () {\n            firstRunCallback(false);\n        };\n        cordova.exec(win, fail, \"CodePush\", \"isFirstRun\", [packageHash]);\n    };\n    NativeAppInfo.isPendingUpdate = function (callback) {\n        var win = function (firstRun) {\n            callback(!!firstRun);\n        };\n        var fail = function () {\n            callback(false);\n        };\n        cordova.exec(win, fail, \"CodePush\", \"isPendingUpdate\", []);\n    };\n    return NativeAppInfo;\n}());\nmodule.exports = NativeAppInfo;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/fileUtil.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar FileUtil = (function () {\n    function FileUtil() {\n    }\n    FileUtil.directoryExists = function (rootUri, path, callback) {\n        FileUtil.getDirectory(rootUri, path, false, function (error, dirEntry) {\n            var dirExists = !error && !!dirEntry;\n            callback(null, dirExists);\n        });\n    };\n    FileUtil.fileErrorToError = function (fileError, message) {\n        return new Error((message ? message : \"An error has occurred while performing the operation. \") + \" Error code: \" + fileError.code);\n    };\n    FileUtil.getDataDirectory = function (path, createIfNotExists, callback) {\n        FileUtil.getDirectory(cordova.file.dataDirectory, path, createIfNotExists, callback);\n    };\n    FileUtil.writeStringToDataFile = function (content, path, fileName, createIfNotExists, callback) {\n        FileUtil.writeStringToFile(content, cordova.file.dataDirectory, path, fileName, createIfNotExists, callback);\n    };\n    FileUtil.getApplicationDirectory = function (path, callback) {\n        FileUtil.getApplicationEntry(path, callback);\n    };\n    FileUtil.getApplicationFile = function (path, callback) {\n        FileUtil.getApplicationEntry(path, callback);\n    };\n    FileUtil.getOrCreateFile = function (parent, path, createIfNotExists, success, fail) {\n        var failFirst = function (error) {\n            if (!createIfNotExists) {\n                fail(error);\n            }\n            else {\n                parent.getFile(path, { create: true, exclusive: false }, success, fail);\n            }\n        };\n        parent.getFile(path, { create: false, exclusive: false }, success, failFirst);\n    };\n    FileUtil.getFile = function (rootUri, path, fileName, createIfNotExists, callback) {\n        FileUtil.getDirectory(rootUri, path, createIfNotExists, function (error, directoryEntry) {\n            if (error) {\n                callback(error, null);\n            }\n            else {\n                FileUtil.getOrCreateFile(directoryEntry, fileName, createIfNotExists, function (entry) { callback(null, entry); }, function (error) { callback(FileUtil.fileErrorToError(error), null); });\n            }\n        });\n    };\n    FileUtil.getDataFile = function (path, fileName, createIfNotExists, callback) {\n        FileUtil.getFile(cordova.file.dataDirectory, path, fileName, createIfNotExists, callback);\n    };\n    FileUtil.fileExists = function (rootUri, path, fileName, callback) {\n        FileUtil.getFile(rootUri, path, fileName, false, function (error, fileEntry) {\n            var exists = !error && !!fileEntry;\n            callback(null, exists);\n        });\n    };\n    FileUtil.getDirectory = function (rootUri, path, createIfNotExists, callback) {\n        var pathArray = path.split(\"/\");\n        var currentDir;\n        var currentIndex = 0;\n        var appDirError = function (error) {\n            callback(new Error(\"Could not get application subdirectory. Error code: \" + error.code), null);\n        };\n        var rootDirSuccess = function (appDir) {\n            if (!createIfNotExists) {\n                appDir.getDirectory(path, { create: false, exclusive: false }, function (directoryEntry) { callback(null, directoryEntry); }, appDirError);\n            }\n            else {\n                currentDir = appDir;\n                if (currentIndex >= pathArray.length) {\n                    callback(null, appDir);\n                }\n                else {\n                    var currentPath = pathArray[currentIndex];\n                    currentIndex++;\n                    if (currentPath) {\n                        FileUtil.getOrCreateSubDirectory(appDir, currentPath, createIfNotExists, rootDirSuccess, appDirError);\n                    }\n                    else {\n                        rootDirSuccess(appDir);\n                    }\n                }\n            }\n        };\n        window.resolveLocalFileSystemURL(rootUri, rootDirSuccess, appDirError);\n    };\n    FileUtil.dataDirectoryExists = function (path, callback) {\n        FileUtil.directoryExists(cordova.file.dataDirectory, path, callback);\n    };\n    FileUtil.copyDirectoryEntriesTo = function (sourceDir, destinationDir, callback) {\n        var fail = function (error) {\n            callback(FileUtil.fileErrorToError(error), null);\n        };\n        var success = function (entries) {\n            var i = 0;\n            var copyOne = function () {\n                if (i < entries.length) {\n                    var nextEntry = entries[i++];\n                    var entryAlreadyInDestination = function (destinationEntry) {\n                        var replaceError = function (fileError) {\n                            callback(new Error(\"Error during entry replacement. Error code: \" + fileError.code), null);\n                        };\n                        if (destinationEntry.isDirectory) {\n                            FileUtil.copyDirectoryEntriesTo(nextEntry, destinationEntry, function (error) {\n                                if (error) {\n                                    callback(error, null);\n                                }\n                                else {\n                                    copyOne();\n                                }\n                            });\n                        }\n                        else {\n                            var fileEntry = destinationEntry;\n                            fileEntry.remove(function () {\n                                nextEntry.copyTo(destinationDir, nextEntry.name, copyOne, fail);\n                            }, replaceError);\n                        }\n                    };\n                    var entryNotInDestination = function (error) {\n                        nextEntry.copyTo(destinationDir, nextEntry.name, copyOne, fail);\n                    };\n                    FileUtil.entryExistsInDirectory(nextEntry, destinationDir, entryAlreadyInDestination, entryNotInDestination);\n                }\n                else {\n                    callback(null, null);\n                }\n            };\n            copyOne();\n        };\n        var directoryReader = sourceDir.createReader();\n        directoryReader.readEntries(success, fail);\n    };\n    FileUtil.entryExistsInDirectory = function (entry, destinationDir, exists, doesNotExist) {\n        var options = { create: false, exclusive: false };\n        if (entry.isDirectory) {\n            destinationDir.getDirectory(entry.name, options, exists, doesNotExist);\n        }\n        else {\n            destinationDir.getFile(entry.name, options, exists, doesNotExist);\n        }\n    };\n    FileUtil.deleteDirectory = function (dirLocation, deleteDirCallback) {\n        FileUtil.getDataDirectory(dirLocation, false, function (oldDirError, dirToDelete) {\n            if (oldDirError) {\n                deleteDirCallback(oldDirError, null);\n            }\n            else {\n                var win = function () { deleteDirCallback(null, null); };\n                var fail = function (e) { deleteDirCallback(FileUtil.fileErrorToError(e), null); };\n                dirToDelete.removeRecursively(win, fail);\n            }\n        });\n    };\n    FileUtil.deleteEntriesFromDataDirectory = function (dirPath, filesToDelete, callback) {\n        FileUtil.getDataDirectory(dirPath, false, function (error, rootDir) {\n            if (error) {\n                callback(error, null);\n            }\n            else {\n                var i = 0;\n                var deleteOne = function () {\n                    if (i < filesToDelete.length) {\n                        var continueDeleting = function () {\n                            i++;\n                            deleteOne();\n                        };\n                        var fail = function (error) {\n                            console.log(\"Could not delete file: \" + filesToDelete[i]);\n                            continueDeleting();\n                        };\n                        var success = function (entry) {\n                            entry.remove(continueDeleting, fail);\n                        };\n                        rootDir.getFile(filesToDelete[i], { create: false, exclusive: false }, success, fail);\n                    }\n                    else {\n                        callback(null, null);\n                    }\n                };\n                deleteOne();\n            }\n        });\n    };\n    FileUtil.writeStringToFile = function (content, rootUri, path, fileName, createIfNotExists, callback) {\n        var gotFile = function (fileEntry) {\n            fileEntry.createWriter(function (writer) {\n                writer.onwriteend = function (ev) {\n                    callback(null, null);\n                };\n                writer.onerror = function (ev) {\n                    callback(writer.error, null);\n                };\n                writer.write(content);\n            }, function (error) {\n                callback(new Error(\"Could write the current package information file. Error code: \" + error.code), null);\n            });\n        };\n        FileUtil.getFile(rootUri, path, fileName, createIfNotExists, function (error, fileEntry) {\n            if (error) {\n                callback(error, null);\n            }\n            else {\n                gotFile(fileEntry);\n            }\n        });\n    };\n    FileUtil.readFileEntry = function (fileEntry, callback) {\n        fileEntry.file(function (file) {\n            var fileReader = new FileReader();\n            fileReader.onloadend = function (ev) {\n                callback(null, ev.target.result);\n            };\n            fileReader.onerror = function (ev) {\n                callback(new Error(\"Could not get file. Error: \" + ev.error), null);\n            };\n            fileReader.readAsText(file);\n        }, function (error) {\n            callback(new Error(\"Could not get file. Error code: \" + error.code), null);\n        });\n    };\n    FileUtil.readFile = function (rootUri, path, fileName, callback) {\n        FileUtil.getFile(rootUri, path, fileName, false, function (error, fileEntry) {\n            if (error) {\n                callback(error, null);\n            }\n            else {\n                FileUtil.readFileEntry(fileEntry, callback);\n            }\n        });\n    };\n    FileUtil.readDataFile = function (path, fileName, callback) {\n        FileUtil.readFile(cordova.file.dataDirectory, path, fileName, callback);\n    };\n    FileUtil.getApplicationEntry = function (path, callback) {\n        var success = function (entry) {\n            callback(null, entry);\n        };\n        var fail = function (error) {\n            callback(FileUtil.fileErrorToError(error), null);\n        };\n        window.resolveLocalFileSystemURL(cordova.file.applicationDirectory + path, success, fail);\n    };\n    FileUtil.getOrCreateSubDirectory = function (parent, path, createIfNotExists, success, fail) {\n        var failFirst = function (error) {\n            if (!createIfNotExists) {\n                fail(error);\n            }\n            else {\n                parent.getDirectory(path, { create: true, exclusive: false }, success, fail);\n            }\n        };\n        parent.getDirectory(path, { create: false, exclusive: false }, success, failFirst);\n    };\n    return FileUtil;\n}());\nmodule.exports = FileUtil;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/codePushUtil.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar CodePushUtil = (function () {\n    function CodePushUtil() {\n    }\n    CodePushUtil.copyUnassignedMembers = function (fromParameter, toParameter) {\n        for (var key in fromParameter) {\n            if (toParameter[key] === undefined || toParameter[key] === null) {\n                toParameter[key] = fromParameter[key];\n            }\n        }\n    };\n    CodePushUtil.getNodeStyleCallbackFor = function (successCallback, errorCallback) {\n        return function (error, result) {\n            if (error) {\n                errorCallback && errorCallback(error);\n            }\n            else {\n                successCallback && successCallback(result);\n            }\n        };\n    };\n    CodePushUtil.getErrorMessage = function (e) {\n        return e && e.message || e && e.toString() || \"\";\n    };\n    CodePushUtil.logMessage = function (msg) {\n        console.log(CodePushUtil.TAG + \" \" + msg);\n    };\n    CodePushUtil.logError = function (message, error) {\n        var errorMessage = message || \"\" + \" \" + CodePushUtil.getErrorMessage(error);\n        console.error(CodePushUtil.TAG + \" \" + errorMessage);\n    };\n    CodePushUtil.TAG = \"[CodePush]\";\n    CodePushUtil.invokeErrorCallback = function (error, errorCallback) {\n        CodePushUtil.logError(null, error);\n        errorCallback && errorCallback(error);\n    };\n    return CodePushUtil;\n}());\nmodule.exports = CodePushUtil;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/sdk.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar NativeAppInfo = require(\"./nativeAppInfo\");\nvar HttpRequester = require(\"./httpRequester\");\nvar Sdk = (function () {\n    function Sdk() {\n    }\n    Sdk.getAcquisitionManager = function (callback, userDeploymentKey, contentType) {\n        var resolveManager = function () {\n            if (userDeploymentKey !== Sdk.DefaultConfiguration.deploymentKey || contentType) {\n                var customConfiguration = {\n                    deploymentKey: userDeploymentKey || Sdk.DefaultConfiguration.deploymentKey,\n                    serverUrl: Sdk.DefaultConfiguration.serverUrl,\n                    ignoreAppVersion: Sdk.DefaultConfiguration.ignoreAppVersion,\n                    appVersion: Sdk.DefaultConfiguration.appVersion,\n                    clientUniqueId: Sdk.DefaultConfiguration.clientUniqueId\n                };\n                var requester = new HttpRequester(contentType);\n                var customAcquisitionManager = new AcquisitionManager(requester, customConfiguration);\n                callback(null, customAcquisitionManager);\n            }\n            else if (Sdk.DefaultConfiguration.deploymentKey) {\n                callback(null, Sdk.DefaultAcquisitionManager);\n            }\n            else {\n                callback(new Error(\"No deployment key provided, please provide a default one in your config.xml or specify one in the call to checkForUpdate() or sync().\"), null);\n            }\n        };\n        if (Sdk.DefaultAcquisitionManager) {\n            resolveManager();\n        }\n        else {\n            NativeAppInfo.getServerURL(function (serverError, serverURL) {\n                NativeAppInfo.getDeploymentKey(function (depolymentKeyError, deploymentKey) {\n                    NativeAppInfo.getApplicationVersion(function (appVersionError, appVersion) {\n                        if (!appVersion) {\n                            callback(new Error(\"Could not get the app version. Please check your config.xml file.\"), null);\n                        }\n                        else if (!serverURL) {\n                            callback(new Error(\"Could not get the CodePush configuration. Please check your config.xml file.\"), null);\n                        }\n                        else {\n                            Sdk.DefaultConfiguration = {\n                                deploymentKey: deploymentKey,\n                                serverUrl: serverURL,\n                                ignoreAppVersion: false,\n                                appVersion: appVersion,\n                                clientUniqueId: device.uuid\n                            };\n                            if (deploymentKey) {\n                                Sdk.DefaultAcquisitionManager = new AcquisitionManager(new HttpRequester(), Sdk.DefaultConfiguration);\n                            }\n                            resolveManager();\n                        }\n                    });\n                });\n            });\n        }\n    };\n    Sdk.reportStatusDeploy = function (pkg, status, currentDeploymentKey, previousLabelOrAppVersion, previousDeploymentKey, callback) {\n        try {\n            Sdk.getAcquisitionManager(function (error, acquisitionManager) {\n                if (error) {\n                    callback && callback(error, null);\n                }\n                else {\n                    acquisitionManager.reportStatusDeploy(pkg, status, previousLabelOrAppVersion, previousDeploymentKey, callback);\n                }\n            }, currentDeploymentKey, \"application/json\");\n        }\n        catch (e) {\n            callback && callback(e, null);\n        }\n    };\n    Sdk.reportStatusDownload = function (pkg, deploymentKey, callback) {\n        try {\n            Sdk.getAcquisitionManager(function (error, acquisitionManager) {\n                if (error) {\n                    callback && callback(error, null);\n                }\n                else {\n                    acquisitionManager.reportStatusDownload(pkg, callback);\n                }\n            }, deploymentKey, \"application/json\");\n        }\n        catch (e) {\n            callback && callback(new Error(\"An error occured while reporting the download status. \" + e), null);\n        }\n    };\n    return Sdk;\n}());\nmodule.exports = Sdk;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/httpRequester.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar HttpRequester = (function () {\n    function HttpRequester(contentType) {\n        this.contentType = contentType;\n    }\n    HttpRequester.prototype.request = function (verb, url, callbackOrRequestBody, callback) {\n        var requestBody;\n        var requestCallback = callback;\n        if (!requestCallback && typeof callbackOrRequestBody === \"function\") {\n            requestCallback = callbackOrRequestBody;\n        }\n        if (typeof callbackOrRequestBody === \"string\") {\n            requestBody = callbackOrRequestBody;\n        }\n        var xhr = new XMLHttpRequest();\n        var methodName = this.getHttpMethodName(verb);\n        xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4) {\n                var response = { statusCode: xhr.status, body: xhr.responseText };\n                requestCallback && requestCallback(null, response);\n            }\n        };\n        xhr.open(methodName, url, true);\n        if (this.contentType) {\n            xhr.setRequestHeader(\"Content-Type\", this.contentType);\n        }\n        xhr.setRequestHeader(\"X-CodePush-Plugin-Name\", \"cordova-plugin-code-push\");\n        xhr.setRequestHeader(\"X-CodePush-Plugin-Version\", cordova.require(\"cordova/plugin_list\").metadata[\"cordova-plugin-code-push\"]);\n        xhr.setRequestHeader(\"X-CodePush-SDK-Version\", cordova.require(\"cordova/plugin_list\").metadata[\"code-push\"]);\n        xhr.send(requestBody);\n    };\n    HttpRequester.prototype.getHttpMethodName = function (verb) {\n        switch (verb) {\n            case 0:\n                return \"GET\";\n            case 7:\n                return \"CONNECT\";\n            case 4:\n                return \"DELETE\";\n            case 1:\n                return \"HEAD\";\n            case 6:\n                return \"OPTIONS\";\n            case 8:\n                return \"PATCH\";\n            case 2:\n                return \"POST\";\n            case 3:\n                return \"PUT\";\n            case 5:\n                return \"TRACE\";\n            default:\n                return null;\n        }\n    };\n    return HttpRequester;\n}());\nmodule.exports = HttpRequester;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/remotePackage.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar LocalPackage = require(\"./localPackage\");\nvar Package = require(\"./package\");\nvar NativeAppInfo = require(\"./nativeAppInfo\");\nvar CodePushUtil = require(\"./codePushUtil\");\nvar Sdk = require(\"./sdk\");\nvar RemotePackage = (function (_super) {\n    __extends(RemotePackage, _super);\n    function RemotePackage() {\n        _super.apply(this, arguments);\n    }\n    RemotePackage.prototype.download = function (successCallback, errorCallback, downloadProgress) {\n        var _this = this;\n        try {\n            CodePushUtil.logMessage(\"Downloading update\");\n            if (!this.downloadUrl) {\n                CodePushUtil.invokeErrorCallback(new Error(\"The remote package does not contain a download URL.\"), errorCallback);\n            }\n            else {\n                this.currentFileTransfer = new FileTransfer();\n                var downloadSuccess = function (fileEntry) {\n                    _this.currentFileTransfer = null;\n                    fileEntry.file(function (file) {\n                        NativeAppInfo.isFailedUpdate(_this.packageHash, function (installFailed) {\n                            var localPackage = new LocalPackage();\n                            localPackage.deploymentKey = _this.deploymentKey;\n                            localPackage.description = _this.description;\n                            localPackage.label = _this.label;\n                            localPackage.appVersion = _this.appVersion;\n                            localPackage.isMandatory = _this.isMandatory;\n                            localPackage.packageHash = _this.packageHash;\n                            localPackage.isFirstRun = false;\n                            localPackage.failedInstall = installFailed;\n                            localPackage.localPath = fileEntry.toInternalURL();\n                            CodePushUtil.logMessage(\"Package download success: \" + JSON.stringify(localPackage));\n                            successCallback && successCallback(localPackage);\n                            Sdk.reportStatusDownload(localPackage, localPackage.deploymentKey);\n                        });\n                    }, function (fileError) {\n                        CodePushUtil.invokeErrorCallback(new Error(\"Could not access local package. Error code: \" + fileError.code), errorCallback);\n                    });\n                };\n                var downloadError = function (error) {\n                    _this.currentFileTransfer = null;\n                    CodePushUtil.invokeErrorCallback(new Error(error.body), errorCallback);\n                };\n                this.currentFileTransfer.onprogress = function (progressEvent) {\n                    if (downloadProgress) {\n                        var dp = { receivedBytes: progressEvent.loaded, totalBytes: progressEvent.total };\n                        downloadProgress(dp);\n                    }\n                };\n                this.currentFileTransfer.download(this.downloadUrl, cordova.file.dataDirectory + LocalPackage.DownloadDir + \"/\" + LocalPackage.PackageUpdateFileName, downloadSuccess, downloadError, true);\n            }\n        }\n        catch (e) {\n            CodePushUtil.invokeErrorCallback(new Error(\"An error occured while downloading the package. \" + (e && e.message) ? e.message : \"\"), errorCallback);\n        }\n    };\n    RemotePackage.prototype.abortDownload = function (abortSuccess, abortError) {\n        try {\n            if (this.currentFileTransfer) {\n                this.currentFileTransfer.abort();\n                abortSuccess && abortSuccess();\n            }\n        }\n        catch (e) {\n            abortError && abortError(e);\n        }\n    };\n    return RemotePackage;\n}(Package));\nmodule.exports = RemotePackage;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/syncStatus.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar SyncStatus;\n(function (SyncStatus) {\n    SyncStatus[SyncStatus[\"UP_TO_DATE\"] = 0] = \"UP_TO_DATE\";\n    SyncStatus[SyncStatus[\"UPDATE_INSTALLED\"] = 1] = \"UPDATE_INSTALLED\";\n    SyncStatus[SyncStatus[\"UPDATE_IGNORED\"] = 2] = \"UPDATE_IGNORED\";\n    SyncStatus[SyncStatus[\"ERROR\"] = 3] = \"ERROR\";\n    SyncStatus[SyncStatus[\"IN_PROGRESS\"] = 4] = \"IN_PROGRESS\";\n    SyncStatus[SyncStatus[\"CHECKING_FOR_UPDATE\"] = 5] = \"CHECKING_FOR_UPDATE\";\n    SyncStatus[SyncStatus[\"AWAITING_USER_ACTION\"] = 6] = \"AWAITING_USER_ACTION\";\n    SyncStatus[SyncStatus[\"DOWNLOADING_PACKAGE\"] = 7] = \"DOWNLOADING_PACKAGE\";\n    SyncStatus[SyncStatus[\"INSTALLING_UPDATE\"] = 8] = \"INSTALLING_UPDATE\";\n})(SyncStatus || (SyncStatus = {}));\nmodule.exports = SyncStatus;\n","/home/travis/build/npmtest/node-npmtest-cordova-plugin-code-push/node_modules/cordova-plugin-code-push/bin/www/installMode.js":"\n /******************************************************************************************** \n \t THIS FILE HAS BEEN COMPILED FROM TYPESCRIPT SOURCES. \n \t PLEASE DO NOT MODIFY THIS FILE DIRECTLY AS YOU WILL LOSE YOUR CHANGES WHEN RECOMPILING. \n \t INSTEAD, EDIT THE TYPESCRIPT SOURCES UNDER THE WWW FOLDER, AND THEN RUN GULP. \n \t FOR MORE INFORMATION, PLEASE SEE CONTRIBUTING.md. \n *********************************************************************************************/ \n\n\n\"use strict\";\nvar InstallMode;\n(function (InstallMode) {\n    InstallMode[InstallMode[\"IMMEDIATE\"] = 0] = \"IMMEDIATE\";\n    InstallMode[InstallMode[\"ON_NEXT_RESTART\"] = 1] = \"ON_NEXT_RESTART\";\n    InstallMode[InstallMode[\"ON_NEXT_RESUME\"] = 2] = \"ON_NEXT_RESUME\";\n})(InstallMode || (InstallMode = {}));\nmodule.exports = InstallMode;\n"}